Привет, меня зовут Юра. Давайте поговорим о событиях DOM.

Что такое DOM?
DOM - это объектная модель документа. Представление документа в виде дерева объектов, доступное для редактирования через JavaScript.
Каждый тип элемента в HTML имеет свой собственный интерфейс DOM, который определяет свойства и методы.
Например, таблица имеет интерфейс с именем HTMLTableElement. Вы можете получить ссылку на определенный элемент, 
написав что-то вроде этого: -code-
Таким образом, мы получаем элемент с идентификатором «id». Затем у вас есть доступ ко всем свойствам и методам, 
которые доступны для этого типа элемента.

Событие - это сигнал от браузера, что что-то произошло.
Есть много типов событий.
События HTML DOM позволяют JavaScript регистрировать различные обработчики событий для элементов в документе HTML.
События обычно используются в сочетании с функциями, и функция не будет выполняться до того, как событие произойдет 
(например, когда пользователь нажимает на элемент, запускается функция, которая выполняет предупреждение («нажал!»).

Давайте посмотрим список наиболее часто используемых, просто для вашей информации:

События мыши - события, которые происходят, когда мышь взаимодействует с документом HTML, принадлежит объекту MouseEvent.
click - событие происходит, когда пользователь нажимает на элемент
contextmenu - событие происходит, когда пользователь щелкает правой кнопкой мыши элемент, чтобы открыть контекстное меню
dblclick - событие происходит, когда пользователь дважды щелкает элемент
mousedown - событие происходит, когда пользователь нажимает кнопку мыши над элементом
mouseenter - событие происходит, когда указатель перемещается на элемент
mouseleave - событие происходит, когда указатель перемещается из элемента
mouseup - событие происходит, когда пользователь перемещает указатель мыши из элемента или из одного из его дочерних элементов
mouseover - событие происходит, когда указатель перемещается на элемент или на один из его дочерних элементов.
mouseout - событие происходит, когда пользователь перемещает указатель мыши из элемента или из одного из его дочерних элементов.

    События клавиатуры - события, которые происходят, когда пользователь нажимает клавишу на клавиатуре, 
    принадлежит объекту KeyboardEvent.
keydown - событие происходит, когда пользователь нажимает клавишу
нажатие клавиши - событие происходит, когда пользователь нажимает клавишу
keyup - событие происходит, когда пользователь отпускает ключ

    События перетаскивания - события, которые происходят, когда элементы перетаскиваются и / или отбрасываются, 
    принадлежат объекту DragEvent.
drag - Событие происходит, когда элемент перетаскивается.
dragend - событие происходит, когда пользователь закончил перетаскивание элемента.
dragenter - событие происходит, когда перетаскиваемый элемент попадает в целевой объект.
dragover - событие происходит, когда перетаскиваемый элемент находится над целью
dragleave - событие происходит, когда перетаскиваемый элемент покидает целевой объект.
dragstart - событие происходит, когда пользователь начинает перетаскивать элемент
drop - Событие происходит, когда перетаскиваемый элемент сбрасывается на цель перетаскивания.

    События фокуса - события, которые происходят, когда элементы получают или теряют фокус, 
    принадлежат объекту FocusEvent.
focus - событие происходит, когда элемент получает фокус
размытие - событие происходит, когда элемент теряет фокус

    События касания - события, которые происходят, когда пользователь касается устройства на основе касания, 
    принадлежит объекту TouchEvent.
touchstart - событие происходит, когда палец помещается на сенсорный экран.
touchmove - событие происходит, когда по экрану перетаскивают палец
touchend - событие происходит, когда палец убирается с сенсорного экрана
touchcancel - событие происходит, когда касание прерывается

Существует три способа регистрации обработчиков событий: встроенный, традиционный и W3C.

Код JavaScript в атрибуте передается объекту Event через параметр события. Возвращаемое значение обрабатывается особым образом,
описанным в спецификации HTML. Это очень негибкий метод определения поведения события, 
который смешивает структуру страницы HTML и функциональность приложения.

Этот подход отделяет наш JavaScript от нашего HTML, и это здорово. 
Он работает, устанавливая функцию обратного вызова в качестве атрибута элемента HTML. 
Однако этот подход допускает только один обработчик на элемент.

Чтобы получить максимальный контроль над событиями при написании сценариев DOM, 
мы хотим использовать прослушиватель событий. Это может выглядеть немного сложнее, чем в предыдущих методах,
но дополнительный код стоит потратить время на ввод текста. Большим преимуществом слушателя событий является то, 
что вы можете иметь как можно больше обработчиков для события.

Чтобы правильно обработать событие, мы бы хотели узнать больше о том, что произошло. 
Не просто «щелчок» или «нажатие клавиши», но каковы были координаты указателя? Какая клавиша была нажата? И так далее. 
Когда происходит событие, браузер создает объект события, помещает в него детали и передает его в качестве аргумента обработчику.

Обработчик родительского элемента всегда может получить сведения о том, где это произошло на самом деле.
Самый глубоко вложенный элемент, вызвавший событие, называется целевым элементом, доступным как event.target.
Когда происходит событие - самый вложенный элемент, в котором оно происходит, помечается как «целевой элемент» (event.target).

Все действия по умолчанию могут быть предотвращены, если мы хотим обрабатывать событие исключительно с помощью JavaScript.
Чтобы предотвратить действие по умолчанию - используйте любое из event.preventDefault ().
Если действие по умолчанию было предотвращено, значение event.defaultPrevented становится истинным, в противном случае - ложным.

Любой обработчик события может остановить событие, вызвав event.stopPropagation (), но это не рекомендуется, 
потому что мы не можем быть уверены, что оно нам не понадобится выше, возможно, для совершенно разных вещей.

Это все. Спасибо за просмотр. До Свидания.
